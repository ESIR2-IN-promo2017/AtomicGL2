<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="texDiffProg">
	<VERTEX>
		// vertex shader
		// ------------------------------------------------------
		// texture shader per fragment
		// ------------------------------------------------------
		// lights nb: 1
		// ------------------------------------------------------

		// attributes inputs  (vertex arrays)
		<ATTRIBUTES>
			attribute vec3 aVertexPosition;
			attribute vec2 aVertexTexCoord;
			attribute vec3 aVertexNormal;
		</ATTRIBUTES>

		// uniform matrices
		<UNIFORMS>
			uniform mat4 uMVMatrix;
			uniform mat4 uPMatrix;
			uniform mat3 uNMatrix;
		</UNIFORMS>

		<VARYING>
			varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;
		</VARYING>

		// output
		<OUTPUT>
	    void main(void) {
	    	// vNormal
				vNormal = uNMatrix * aVertexNormal;
				vPosition = vec4(aVertexPosition, 1.0);

	      gl_Position = uPMatrix * uMVMatrix * vPosition;
	      vTextureCoord = aVertexTexCoord;
	    }
	  </OUTPUT>
	</VERTEX>

	<FRAGMENT>
		<PRECISION>
			#ifdef GL_ES
 				precision highp float;
 			#endif
		</PRECISION>
		// fragment shader
		// ------------------------------------------------------
		// texture shader per fragment
		// ------------------------------------------------------
		// lights nb: 1
		// ------------------------------------------------------

	  // Uniform
	  <UNIFORMS>
    	uniform sampler2D uSampler0;

			//point light ie omni dir:  location, color
			uniform vec3 PointLightPosition;
			uniform vec3 PointLightColor;
			uniform float PointLightIntensity;

			uniform vec3 DirecionnalLightColor;
			uniform vec3 DirecionnalLightDirection;

			uniform vec3 SpotLightColor;
			uniform vec3 SpotLightPosition;
			uniform vec3 SpotLightDirection;
			uniform float SpotLightRadius;
		</UNIFORMS>

		<VARYING>
			varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;
		</VARYING>

		//output
		<OUTPUT>
			// local constant
			// Kd: diffuse coeff
			float Kd = 1.0 ;

		  void main(void) {
				//////////////////
				// Point Lights //
				//////////////////
				vec3 lightDirection = normalize(PointLightPosition - vPosition.xyz);

				// distance
				float distance = sqrt(pow(PointLightPosition.x-vPosition.x,2.0) + pow(PointLightPosition.y-vPosition.y,2.0) + pow(PointLightPosition.z-vPosition.z,2.0));

				// eye direction
				vec3 eyeDirection = normalize(-vPosition.xyz);

				// normalize normal
				vec3 normal = normalize(vNormal);

				// diffuse term
				float diffuseLightWeight = max(dot(normal, lightDirection), 0.0) * PointLightIntensity;

				// texture color
				vec4 texColor  = texture2D(uSampler0, vTextureCoord);

				// light color
				vec3 lightColor = Kd*diffuseLightWeight*PointLightColor*texColor.rgb / distance;


				////////////////////////
				// Directional Lights //
				////////////////////////
				lightDirection = normalize(-DirecionnalLightDirection.xyz);

				// diffuse term
				diffuseLightWeight = max(dot(normal, lightDirection), 0.0);

				// light color
				lightColor += Kd*diffuseLightWeight*DirecionnalLightColor*texColor.rgb;


				/////////////////
				// Spot Lights //
				/////////////////
				lightDirection = normalize(SpotLightPosition - vPosition.xyz);

				float factor = (SpotLightPosition.y / SpotLightDirection.y) - vPosition.y;
				vec3 longDir = SpotLightDirection.xyz * factor;
				vec3 centerShower = SpotLightPosition.xyz + longDir;

				distance = sqrt(pow(SpotLightPosition.x-vPosition.x,2.0) +	pow(SpotLightPosition.y-vPosition.y,2.0) + pow(SpotLightPosition.z-vPosition.z,2.0));

				float planDistance = sqrt(pow(centerShower.x-vPosition.x,2.0) + pow(centerShower.z-vPosition.z,2.0));
				float planRadius = distance*SpotLightRadius;

				if(planRadius > planDistance)
				{
					// diffuse term
					diffuseLightWeight = max(dot(normal, lightDirection), 0.0) * 10.0;

					// light color
				  lightColor += Kd*diffuseLightWeight*SpotLightColor*texColor.rgb / distance;
				}


				// Global Color
	      gl_FragColor = vec4(lightColor,1.0);
	    }
   	</OUTPUT>
	</FRAGMENT>
</SHADER>
