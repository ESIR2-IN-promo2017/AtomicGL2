<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="texDiffProg">
	<VERTEX>
		// vertex shader
		// ------------------------------------------------------
		// texture shader per fragment
		// ------------------------------------------------------
		// lights nb: 1
		// ------------------------------------------------------

		// attributes inputs  (vertex arrays)
		<ATTRIBUTES>
			attribute vec3 aVertexPosition;
			attribute vec2 aVertexTexCoord;
			attribute vec3 aVertexNormal;
		</ATTRIBUTES>

		// uniform matrices
		<UNIFORMS>
			uniform mat4 uMVMatrix;
			uniform mat4 uPMatrix;
			uniform mat3 uNMatrix;
		</UNIFORMS>

		<VARYING>
			varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;
		</VARYING>

		// output
		<OUTPUT>
	    void main(void) {
	    	// vNormal
				vNormal = uNMatrix * aVertexNormal;

	      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
	      vTextureCoord = aVertexTexCoord;
	    }
	  </OUTPUT>
	</VERTEX>

	<FRAGMENT>
		<PRECISION>
			#ifdef GL_ES
 				precision highp float;
 			#endif
		</PRECISION>
		// fragment shader
		// ------------------------------------------------------
		// texture shader per fragment
		// ------------------------------------------------------
		// lights nb: 1
		// ------------------------------------------------------

	  // Uniform
	  <UNIFORMS>
    	uniform sampler2D uSampler0;

			// lights
			// ambient
			uniform vec3 uAmbientColor;

			//point light ie omni dir:  location, color
			uniform vec3 SunPosition;
			uniform vec3 SunColor;
		</UNIFORMS>

		<VARYING>
			varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;
		</VARYING>

		//output
		<OUTPUT>
			// local constant
			// Kd: diffuse coeff
			float Kd = 1.0 ;

		  void main(void) {
				// light direction
				vec3 lightDirection = normalize(SunPosition - vPosition.xyz);

				// eye direction
				vec3 eyeDirection = normalize(-vPosition.xyz);

				// normalize normal
				vec3 normal = normalize(vNormal);

				// diffuse term
				float diffuseLightWeight = max(dot(normal, lightDirection), 0.0);

				// texture color
				vec4 texColor  = texture2D(uSampler0, vec2(vTextureCoord.s, vTextureCoord.t));

				// light color
				vec3 lightColor = Kd*uAmbientColor*texColor.rgb + Kd*diffuseLightWeight*SunColor *texColor.rgb ;

	      gl_FragColor = vec4(lightColor,1.0);
	    }
   	</OUTPUT>
	</FRAGMENT>
</SHADER>