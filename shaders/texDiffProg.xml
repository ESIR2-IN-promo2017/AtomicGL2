<?xml version="1.0" encoding="UTF-8"?>

<SHADER name="texDiffProg">
<<<<<<< HEAD
	<VERTEX>
		// vertex shader
		// ------------------------------------------------------
		// texture shader per fragment
		// ------------------------------------------------------
		// lights nb: 1
		// ------------------------------------------------------

		// attributes inputs  (vertex arrays)
		<ATTRIBUTES>
=======
	
	// vertex shader
	// ------------------------------------------------------
	// texture shader per fragment 
	// ------------------------------------------------------
	// lights nb: 1
	// ------------------------------------------------------
	<VERTEX>
		<ATTRIBUTES>	
>>>>>>> a69747fdb02610423d32cb59eb5ad63b9b77f0b0
			attribute vec3 aVertexPosition;
			attribute vec2 aVertexTexCoord;
			attribute vec3 aVertexNormal;
		</ATTRIBUTES>

<<<<<<< HEAD
		// uniform matrices
=======
>>>>>>> a69747fdb02610423d32cb59eb5ad63b9b77f0b0
		<UNIFORMS>
			uniform mat4 uMVMatrix;
			uniform mat4 uPMatrix;
			uniform mat3 uNMatrix;
		</UNIFORMS>

<<<<<<< HEAD
		// output
		<OUTPUT>
	    varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;

	    void main(void) {
	    	// vNormal
				vNormal = uNMatrix * aVertexNormal;

	      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
	      vTextureCoord = aVertexTexCoord;
	    }
	  </OUTPUT>
	</VERTEX>

	<FRAGMENT>
		#ifdef GL_ES
			precision highp float;
		#endif
		// fragment shader
		// ------------------------------------------------------
		// texture shader per fragment
		// ------------------------------------------------------
		// lights nb: 1
		// ------------------------------------------------------

	  // Uniform
	  <UNIFORMS>
    	uniform sampler2D uSampler0;

			// lights
			// ambient
			uniform vec3 uAmbientColor;

			//point light ie omni dir:  location, color
			uniform vec3 uPointLightPosition0;
			uniform vec3 uPointLightColor0;
		</UNIFORMS>

		//output
		<OUTPUT>
			// local constant
			// Kd: diffuse coeff
			float Kd = 1.0 ;

			// inputs
			varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;

		  void main(void) {
				// light direction
				vec3 lightDirection = normalize(uPointLightPosition0 - vPosition.xyz);

=======
		<VARYING>
	    	varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;
		</VARYING>

		<OUTPUT>
		    void main(void) {
	    		// vNormal
				vNormal = uNMatrix * aVertexNormal;	
	    
	        	gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
	        	vTextureCoord = aVertexTexCoord;
	    	}
	   	</OUTPUT>
	</VERTEX>

	// fragment shader
	// ------------------------------------------------------
	// texture shader per fragment 
	// ------------------------------------------------------
	// lights nb: 1
	// ------------------------------------------------------
	<FRAGMENT>
		<PRECISION>
			#ifdef GL_ES
				precision highp float;
			#endif
		</PRECISION>
		
       	<UNIFORMS>
    		uniform sampler2D uSampler0;
    	
			// lights
			// ambient
			uniform vec3 uAmbientColor;

			//point light ie omni dir:  location, color
			uniform vec3 uPointLightPosition0;
			uniform vec3 uPointLightColor0;
		</UNIFORMS>

		<VARYING>
			varying vec2 vTextureCoord;
			varying vec4 vPosition;
			varying vec3 vNormal;
		</VARYING>

		<OUTPUT>

			// local constant
			// Kd: diffuse coeff
				float Kd = 1.0 ;	
		
    		void main(void) {
		    	// light direction
				vec3 lightDirection = normalize(uPointLightPosition0 - vPosition.xyz);
				
>>>>>>> a69747fdb02610423d32cb59eb5ad63b9b77f0b0
				// eye direction
				vec3 eyeDirection = normalize(-vPosition.xyz);

				// normalize normal
				vec3 normal = normalize(vNormal);

<<<<<<< HEAD
				// diffuse term
				float diffuseLightWeight = max(dot(normal, lightDirection), 0.0);

				// texture color
				vec4 texColor  = texture2D(uSampler0, vec2(vTextureCoord.s, vTextureCoord.t));

				// light color
				vec3 lightColor = Kd*uAmbientColor*texColor.rgb + Kd*diffuseLightWeight*uPointLightColor0 *texColor.rgb ;

	      gl_FragColor = vec4(lightColor,1.0);
	    }
   	</OUTPUT>
=======
				//  diffuse term
				float diffuseLightWeight = max(dot(normal, lightDirection), 0.0);
				
				// texture color
				vec4 texColor  = texture2D(uSampler0, vec2(vTextureCoord.s, vTextureCoord.t));
					
				// light color
				vec3 lightColor = Kd*uAmbientColor*texColor.rgb + Kd*diffuseLightWeight*uPointLightColor0 *texColor.rgb ;
	
		        gl_FragColor = vec4(lightColor,1.0);
    		}
   		</OUTPUT>
>>>>>>> a69747fdb02610423d32cb59eb5ad63b9b77f0b0
	</FRAGMENT>
</SHADER>
